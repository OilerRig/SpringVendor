name: Test, Upload artifact and Deploy
on:
  workflow_dispatch:
  push:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 17 ]
    name: Run unit tests on Java ${{ matrix.java }}

    steps:
      - uses: actions/checkout@master
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
      - run: mvn -f pom.xml clean compile test

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build, package and upload .jar artifact

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Build and package project
        run: mvn -f pom.xml clean package

      - name: Copy jar to app.jar
        run: cp ./target/vendor-0.0.1-SNAPSHOT.jar ./target/app.jar

      - name: Upload Maven build artifact
        uses: actions/upload-artifact@v4
        with:
          name: SpringVendor
          path: ./target/app.jar

  deploy-vm:
    needs: build
    name: Deploy built app to VM
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.VM_HOST }}
      SSH_USER: ${{ secrets.VM_USER }}
      SSH_PORT: ${{ secrets.VM_SSH_PORT }}
      APP_JAR_NAME: app.jar
      DEPLOY_PATH: /home/baldvendor/vendor
      SERVICE_NAME: oiler-vendor

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: SpringVendor
          path: ./

      - name: Copy JAR to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          source: ${{ env.APP_JAR_NAME }}
          target: ${{ env.DEPLOY_PATH }}
          overwrite: true

      - name: Deploy and Restart Application on VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script: |
            cd ${{ env.DEPLOY_PATH }}

            echo "Stopping existing service: ${{ env.SERVICE_NAME }}..."
            sudo systemctl stop ${{ env.SERVICE_NAME }}
            echo "Service stopped."

            echo "Starting new service: ${{ env.SERVICE_NAME }}..."
            sudo systemctl start ${{ env.SERVICE_NAME }}
            echo "Service started."

            sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager